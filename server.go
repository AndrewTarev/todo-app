/*
Package Тodo-app предоставляет базовую структуру HTTP-сервера с функциями запуска и завершения работы.

Этот пакет предназачен для создания простого и настраиваемого HTTP-сервера с возможностью обработки запросов, установки тайм-аутов и ограничения размера заголовков. Он может быть расширен для обработки маршрутов или настройки API.
*/

package todo_app

import (
	"context"
	"net/http"
	"time"
)

// Server представляет HTTP-сервер с возможностью запуска и завершения работы.
//
// Он предоставляет базовый функционал для конфигурирования и управления сервером.
// Тайм-ауты чтения и записи, а также максимальный размер заголовков определены
// как настройки по умолчанию, которые можно изменять при необходимости.
type Server struct {
	httpServer *http.Server // Экземпляр стандартного HTTP-сервера
}

// Run запускает HTTP-сервер на указанном порту.
//
// Параметры:
//   - port (string): Адрес (в формате "localhost:8080") или порт (":8080"), на котором будет запускаться сервер.
//
// Сервер конфигурируется с минимальными настройками:
//   - MaxHeaderBytes: 1 MB (максимальный размер заголовков запросов).
//   - ReadTimeout: 10 секунд (тайм-аут чтения запросов).
//   - WriteTimeout: 10 секунд (тайм-аут записи ответов).
//
// Возвращает:
//   - error: Ошибка, возникшая при запуске сервера или во время его работы.

func (s *Server) Run(port string, handler http.Handler) error {
	s.httpServer = &http.Server{
		Addr:           port,
		Handler:        handler,
		MaxHeaderBytes: 1 << 20, // 1 MB
		ReadTimeout:    10 * time.Second,
		WriteTimeout:   10 * time.Second,
	}
	return s.httpServer.ListenAndServe()
}

// Shutdown корректно завершает работу HTTP-сервера.
//
// Этот метод завершает существующие HTTP-соединения и закрывает сервер. Для этого используется `context.Context`, который помогает задавать ограничения по времени или отменять процесс завершения.
//
// Параметры:
//   - ctx (context.Context): Контекст для управления временем жизни операции завершения.
//
// Возвращает:
//   - error: Ошибка, если сервер не смог корректно завершить работу.

func (s *Server) Shutdown(ctx context.Context) error {
	return s.httpServer.Shutdown(ctx)
}
